********************************************************************************************************************************************
STEP 6.1:
    1/7 INTRODUCTION:
        Infrastructure as code (IaC) doesn't quite trip off the tongue, and its meaning isn't always straightforward.
        But IaC has been with us since the beginning of DevOpsâ€”and some experts say DevOps wouldn't be possible without it.
        In other words, your infrastructure is treated the same way that any other code would be.
    2/7 Explore environment deployment:
        ! An easier way to remove the possibility of human error when initializing machines is to use Infrastructure as Code. !
        Manual deployment versus infrastructure as code:
        Implementing infrastructure as code:
            With infrastructure as code, you capture your environment (or environments) in a text file (script or definition).
            Your file might include any networks, servers, and other computing resources.
    3/7 Examine environment configuration:
        Configuration management refers to automated configuration management, typically in version-controlled scripts, 
            for an application and all the environments needed to support it.
        Configuration management means lighter-weight, 
            executable configurations that allow us to have configuration and environments as code.  
        Manual configuration versus configuration as code:
            Manually managing the configuration of a single application and environment can be challenging.
            The challenges are even more significant for managing multiple applications and environments across multiple servers.
    4/7 Understand imperative versus declarative configuration:
        There are a few different approaches that you can adopt to implement Infrastructure as Code and Configuration as Code.
        Two of the main methods of approach are:
            - Declarative (functional). The declarative approach states what the final state should be.
            - Imperative (procedural). In the imperative approach, the script states the how for the final state of the machine by executing the steps to get to the finished state.
    5/7 Understand idempotent configuration:
        Idempotence is a mathematical term that can be used in Infrastructure as Code and Configuration as Code.
        It can apply one or more operations against a resource, resulting in the same outcome.
    6/7 TEST:
    7/7 SUMMARY:
********************************************************************************************************************************************
STEP 6.2:
    1/9 INTRODUCTION:
        This module explores Azure Resource Manager templates 
            and their components and details dependencies and modularized templates with secrets.
    2/9 Why use Azure Resource Manager templates?:
        Using Resource Manager templates will make your deployments faster and more repeatable.
    3/9 Explore template components:
        Azure Resource Manager templates are written in JSON, which allows you to express data stored as an object (such as a virtual machine) in text.
        - Parameters:
            This section is where you specify which values are configurable when the template runs.
            "
                "parameters": {
                    "adminUsername": {
                        "type": "string",
                        "metadata": {
                        "description": "Username for the Virtual Machine."
                        }
                    },
                    "adminPassword": {
                        "type": "securestring",
                        "metadata": {
                        "description": "Password for the Virtual Machine."
                        }
                    }
                }
            "
        - Variables:
            This section is where you define values that are used throughout the template.
            "
                "variables": {
                    "nicName": "myVMNic",
                    "addressPrefix": "10.0.0.0/16",
                    "subnetName": "Subnet",
                    "subnetPrefix": "10.0.0.0/24",
                    "publicIPAddressName": "myPublicIP",
                    "virtualNetworkName": "MyVNET"
                }
            "
        - Functions:
            This section is where you define procedures that you don't want to repeat throughout the template.
            "
                "functions": [
                    {
                        "namespace": "contoso",
                        "members": {
                        "uniqueName": {
                            "parameters": [
                            {
                                "name": "namePrefix",
                                "type": "string"
                            }
                            ],
                            "output": {
                            "type": "string",
                            "value": "[concat(toLower(parameters('namePrefix')), uniqueString(resourceGroup().id))]"
                            }
                        }
                        }
                    }
                ],
            "
        - Resources:
            This section is where you define the Azure resources that make up your deployment.
            "
                {
                    "type": "Microsoft.Network/publicIPAddresses",
                    "name": "[variables('publicIPAddressName')]",
                    "location": "[parameters('location')]",
                    "apiVersion": "2018-08-01",
                    "properties": {
                        "publicIPAllocationMethod": "Dynamic",
                        "dnsSettings": {
                        "domainNameLabel": "[parameters('dnsLabelPrefix')]"
                        }
                    }
                }
            "
        - Outputs:
            This section is where you define any information you'd like to receive when the template runs.
            "
                "outputs": {
                    "hostname": {
                        "type": "string",
                        "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
                    }
                }
            "
    4/9 Manage dependencies:
        Resource Manager evaluates the dependencies between resources and deploys them in their dependent order.
        When resources aren't dependent on each other, the Resource Manager deploys them in parallel.
        ! You only need to define dependencies for resources that are deployed in the same template. !
        The dependsOn element:
            Within your template, the dependsOn element enables you to define one resource dependent on one or more other resources.
        "
            ...
            "dependsOn" : [
                "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[resourceId('Microsoft. Network/networkInterfaces/', variables ('nicName'))]"
            ]
        "
        Circular dependencies:
            A circular dependency is a problem with dependency sequencing, resulting in the deployment going around in a loop and unable to continue.
    