********************************************************************************************************************************************
STEP 7.1:
    1/9 INTRODUCTION:
        In this module, we'll talk about managing dependencies in software development. 
        We're going to cover what dependencies are and how to identify them in your codebase.
    2/9 What is dependency management?:
        Dependencies in software:
            Projects have dependencies on other projects, and solutions aren't single pieces of software.
        Why is dependency management needed?:
            Software dependencies that are introduced in a project and solution must be appropriately declared and resolved.
    3/9 Describe elements of a dependency management strategy:
        There are many aspects of a dependency management strategy:
            - Standardization Managing dependencies benefit from a standardized way of declaring and resolving them in your codebase.
                Standardization allows a repeatable, predictable process and usage that can be automated as well.
            - Package formats and sources The distribution of dependencies can be performed by a packaging method suited for your solution's dependency type.
            - Versioning Just like your own code and components, the dependencies in your solution usually evolve.
    4/9 Identify dependencies:
        This process begins with identifying the dependencies in your codebase and determining which ones will be officially recognized.
    5/9 Understand source and package componentization: 
        Current development practices already have the notion of componentization.
        There are two ways of componentization commonly used:
            - Source componentization The first way of componentization is focused on source code.
                It refers to splitting the source code in the codebase into separate parts and organizing it around the identified components.
            - Package componentization The second way uses packages.
                Distributing software components is performed utilizing packages as a formal way of wrapping and handling the components.
    6/9 Decompose your system:
    7/9 Scan your codebase for dependencies:
        These include scanning your code for patterns and reuse and analyzing how the solution is composed of individual modules and components.
            - Duplicate code
            - High cohesion and low coupling
            - Individual lifecycle
            - Stable parts
            - Independent code and components
    8/9 TEST:
    9/9 SUMMARY:
********************************************************************************************************************************************
STEP 7.2:
    1/12 INTRODUCTION:
        This module describes package feeds, common public package sources, and how to create and publish packages.
    2/12 Explore packages:
        Packages are used to define the components you rely on and depend upon in your software solution.
        They provide a way to store those components in a well-defined format with metadata to describe them.
        What is a package?:
            A package is a formalized way of creating a distributable unit of software artifacts that can be consumed from another software solution.
        Types of packages:
            Packages can be used for different kinds of components.
            The type of components you want to use in your codebase differ for the different parts and layers of the solution you're creating.
                - Maven:
                    is used for Java-based projects.
                    Each package has a Project Object Model file describing the project's metadata and is the basic unit for defining a package and working with it.
                - PyPi 
                    The Python Package Index
                    abbreviated as PyPI and known as the Cheese Shop, is the official third-party software repository for Python.
                - Docker 
                    packages are called images and contain complete and self-contained deployments of components.
                    ! A Docker image commonly represents a software component that can be hosted and executed by itself without any dependencies on other images. !
    3/12 Understand package feeds:
        Packages should be stored in a centralized place for distribution and consumption to take dependencies on the components it contains.
        !
            The centralized storage for packages is commonly called a 'package feed'. 
            There are other names in use, such as repository or registry.
        !
        ! Each package type has its type of feed. !
        Private and public feeds:
            The package feeds are centralized and available for many different consumers.
    4/12 Explore package feed managers:
        Each of the package types has a corresponding manager that takes care of one or more of the following aspects of package management:
            - Installation and removal of local packages
            - Pushing packages to a remote package feed
            - Consuming packages from a remote package feed
            - Searching feeds for packages
        The package manager has cross-platform command-line interface (CLI) tools to manage the local packages and feeds that host the packages.
        Choosing tools:
            The command-line nature of the tooling offers the ability to include it in scripts to automate package management. 
    5/12 Explore common public package sources:
        The various package types have a standard source that is commonly used for public use.
        It's a go-to place for developers to find and consume publically available components as software dependencies. These sources are package feeds.
        Public:
            In general, you'll find that publically available package sources are free to use.
    6/12 Explore self-hosted and SaaS based package sources:
        The following private package sources will give you a starting point for finding the most relevant feeds.
        Private:
            Private feeds can be used where packages should be available to a select audience.
            The main difference between public and private feeds is the need for authentication.
            There are two options for private feeds:
                - Self-hosting 
                    Some of the package managers are also able to host a feed.
                    One can host the required solution to offer a private feed using on-premises or private cloud resources.
    7/12 Consume packages:
        Each software project that consumes packages to include the required dependencies will use the package manager and more package sources.
        Upstream sources:
            Part of package management involves keeping track of the various sources.
            One way to specify multiple package sources is by choosing a primary source and an upstream source.
            !
                The source will include these downloaded packages and starts to act as a cache for the upstream source. 
                It also offers the ability to keep track of any packages from the external upstream source.
            !
        Packages graph:
            A feed can have one or more upstream sources, which might be internal or external.
            Each of these can have additional upstream sources, creating a package graph of the source.
    8/12 Introduction to Azure Artifacts:
        Previously you learned about packaging dependencies and the various packaging formats, feeds, sources, and package managers.
        Selecting package sources:
            When creating your solution, you'll decide which packages you want to consume to offer the dependent components.
    9/12 Publish packages:
        As software is developed and components are written, you'll most likely produce components as dependencies packaged for reuse.
        - Creating a feed:
            The first step is to create a feed where the packages can be stored.
            In Azure Artifacts, you can create multiple feeds, which are always private.
        - What are feeds in Azure Artifacts?:
            Most package management systems provide endpoints where you can request packages to install in your applications. 
                Those endpoints are called feeds.
        - Controlling access:
            The Azure Artifacts feed you created is always private and not available publically.
            You need access to it by authenticating to Azure Artifacts with an account with access to Azure DevOps and a team project.
        - Push packages to a feed:
            Once you've authenticated to Azure DevOps, you can pull and push packages to the package feed, provided you have permission to do so.
        - Updating packages:
            Packages might need to be updated during their lifetime.
            Technically, updating a package is made by pushing a new version of the package to the feed.
            ! The package feed manager manages to properly store the updated package with the existing packages in the feed. !
    10/12 Package Management with Azure Artifacts:
        ! LAB !
        Task 1: Configuring the EShopOnWeb solution in Visual Studio
            Cloning repository to localhost. And, opening it with Visual Studio Code.
        Exercise 1: Working with Azure Artifacts
            Task 1: Creating and connecting to a feed
                Creating Feed in Azure Dev and adding/connecting it by adding connection file URL to VS Code's "NuGet Package Manager"
            Task 2: Creating and publishing an in-house developed NuGet package
                In this task, you will create and publish an in-house developed custom NuGet package.
    11/12 TEST:
    12/12 SUMMARY:
********************************************************************************************************************************************
STEP 7.3:
    1/9 INTRODUCTION:
        This module details package migration, consolidation, and configuration to secure access to package feeds and artifact repositories.
    2/9 Identify existing artifact repositories:
        An artifact is a deployable component of your application.
    3/9 Migrate and integrating artifact repositories:
        While you can continue to work with your existing artifact repositories in their current locations when using Azure Artifacts, 
            there are advantages to migrating them.
    4/9 Secure access to package feeds:
        Trusted sources:
            Package feeds are a trusted source of packages. 
            The offered packages will be consumed by other codebases and used to build software that needs to be secure.
        Securing access:
            Package feeds must be secured for access by authorized accounts, so only verified and trusted packages are stored there.
            ! It still assumes that the persons who can push packages will only add safe and secure packages. !
        Securing availability:
            It applies to the consumption and publishing of packages.
    5/9 Examine roles:
        Azure Artifacts has four different roles for package feeds. 
        These are incremental in the permissions they give.
        The roles are in incremental order:
            - Reader: Can list and restore (or install) packages from the feed.
            - Collaborator: Can save packages from upstream sources.
            - Contributor: Can push and unlist packages in the feed.
            - Owner: has all available permissions for a package feed.
    6/9 Examine permissions:
        The feeds in Azure Artifacts require permission to the various features it offers.
    7/9 Examine authentication:
        Azure DevOps users will authenticate against Azure Active Directory when accessing the Azure DevOps portal.
    8/9 TEST:
    9/9 SUMMARY:
********************************************************************************************************************************************
STEP 7.4:
    1/10 INTRODUCTION:
        Software changes over time. 
            The requirements for the software don't stay the same.
        Immutable packages:
            As packages get new versions, your codebase can choose when to use a new version of the packages it consumes.
    2/10 Understand versioning of artifacts:
        Its proper software development practice to indicate changes to code with the introduction of an increased version number.
        ! How artifacts are versioned technically varies per package type. 
            Each type has its way of indicating the version in the metadata. !
    3/10 Explore semantic versioning:
        One of the predominant ways of versioning is the use of semantic versioning.
        Semantic versioning uses a three-part version number and an extra label:    
            - Major.Minor.Patch 
        For prerelease versions, it's customary to use a label after the regular version number.
            The label itself can be any text describing the nature of the prerelease.
                - 1.0.0-rc1 (is a prerelease for the upcoming 1.0.0 version)
            ! Chances are that there will be incompatible changes from a prerelease to the final version. !
    4/10 Examine release views:
        When building packages from a pipeline, the package needs to have a version before being consumed and tested.
        Still, its extra metadata from the Azure Artifacts feed is called a descriptor.
        Feeds in Azure Artifacts have three different views by default. 
            These views are added when a new feed is created. The three views are:
                - Local. The @Local view contains all release and prerelease packages and the packages downloaded from upstream sources.
                - Prerelease. The @Prerelease view contains all packages that have a label in their version number.
                - Release. The @Release view contains all packages that are considered official releases.
        Using views:
            You can use views to offer help consumers of a package feed filter between released and unreleased versions of packages.
                By default, the @Local view is used to offer the list of available packages. The format for this URI is:
                    "
                        https://pkgs.dev.azure.com/{yourteamproject}/_packaging/{feedname}/nuget/v3/index.json
                    "
                When consuming a package feed by its URI endpoint, the address can have the requested view included. 
                    For a specific view, the URI includes the name of the view, which changes to be:
                        "
                            https://pkgs.dev.azure.com/{yourteamproject}/_packaging/{feedname}@{Viewname}/nuget/v3/index.json
                        "
            ! The tooling will show and use the packages from the specified view automatically. !
    5/10 Promote packages:
        Azure Artifacts has the notion of promoting packages to views to indicate that a version is of a certain quality level.
    6/10 Exercise - Promote a package:  
    7/10 Explore best practices for versioning:
        Here's a couple of suggestions:
            - Have a documented versioning strategy.
            - Each repository should only reference one feed.
            - On package creation, automatically publish packages back to the feed.
    8/10 Exercise - Push from the pipeline:
    9/10 TEST:
    10/10 SUMMARY:
********************************************************************************************************************************************
STEP 7.5:
    1/7 INTRODUCTION:
        This module introduces you to GitHub Packages. 
        It explores ways to control permissions and visibility, publish, install, delete and restore packages using GitHub.
        GitHub Packages is a software package hosting service that allows you to host your packages, containers, and other dependencies.
        ! GitHub Packages give you the flexibility to control permissions and visibility for your packages. !
    2/7 Publish packages:
        GitHub Packages use native package tooling commands to publish and install package versions.
        When creating a package, you can provide a description, installation and usage instructions, and other details on the package page.
    3/7 Install a package:
        You can install any package you have permission to view from GitHub Packages and use the package as a dependency in your project.
    4/7 Delete and restore a package:
    5/7 Explore package access control and visibility:
        You can only use granular permissions with the Container registry (scoped to a personal user or organization account). 
            GitHub.com doesn't support granular permissions in other package registries, like the npm registry.
    6/7 TEST:
    7/7 SUMMARY:
